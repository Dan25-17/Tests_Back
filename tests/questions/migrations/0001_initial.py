# Generated by Django 4.2.11 on 2024-05-11 11:01

import django.contrib.auth.models
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(unique=True, verbose_name='Порядковый номер вопроса')),
                ('name', models.CharField(help_text='Задание - что ученику нужно сделать', max_length=500, verbose_name='Текст вопроса')),
                ('task', models.TextField(blank=True, help_text='Текст задания, в котором ученику нужно что-то сделать', max_length=1000, null=True, verbose_name='Текст задания')),
                ('answers', models.CharField(blank=True, max_length=500, null=True, verbose_name='Варианты ответов')),
                ('correct', models.JSONField(default={'answers': []}, help_text='Вставить в квадратные скобки в кавычках, через запятую, например: "1", "2", "3" ', verbose_name='Правильный ответ')),
                ('answer_type', models.CharField(choices=[('any', 'Допустим один из вариантов'), ('all', 'Один вариант')], max_length=500, verbose_name='Тип ответа')),
                ('explanation', models.TextField(max_length=1000, verbose_name='Текстовое объяснение ошибки')),
                ('file', models.FileField(blank=True, null=True, upload_to='uploads/%Y/%m/%d/', verbose_name='Файл с объяснением')),
                ('type_of_question', models.CharField(choices=[('1', 'Один ответ'), ('2', 'Множественный ответ'), ('3', 'Открытый ответ'), ('4', 'Сопоставление')], max_length=500, verbose_name='Тип вопроса')),
                ('is_dubble', models.BooleanField(default=False)),
                ('dubbled_question', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dubble', to='questions.question', verbose_name='Чей дублер')),
            ],
            options={
                'verbose_name': 'вопросы',
                'verbose_name_plural': 'Вопросы',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='QuestionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questions_per_page', models.IntegerField(help_text='Сколько вопросов ученик получит за один раз', verbose_name='Количество вопросов')),
            ],
            options={
                'verbose_name': 'Настройки количества вопросов',
                'verbose_name_plural': 'Настройки количества вопросов',
            },
        ),
        migrations.CreateModel(
            name='StudentList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя ученика')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия ученика')),
                ('tg_id', models.CharField(max_length=150, verbose_name='ID в Телеграм')),
            ],
            options={
                'verbose_name': 'список учеников',
                'verbose_name_plural': 'Списки учеников',
            },
        ),
        migrations.CreateModel(
            name='TaskNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.IntegerField(verbose_name='Номер задания в ЕГЭ')),
            ],
            options={
                'verbose_name': 'номер задания в егэ',
                'verbose_name_plural': 'Номера задания в егэ',
            },
        ),
        migrations.CreateModel(
            name='StudentAnswers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_answer', models.CharField(max_length=500, verbose_name='Первый ответ ученика')),
                ('correct_or_not', models.BooleanField(verbose_name='Правильность ответа')),
                ('last_answer', models.CharField(max_length=500, verbose_name='Последний ответ ученика')),
                ('dubble_sent', models.BooleanField(default=True, verbose_name='Отправлен ли дубль')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students_answers', to='questions.question', verbose_name='Вопрос')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='questions.studentlist', verbose_name='Ученик')),
            ],
            options={
                'verbose_name': 'ответы учеников',
                'verbose_name_plural': 'Ответы учеников',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='task_number',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='questions.tasknumber', verbose_name='Номер задания в ЕГЭ'),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='Username')),
                ('email', models.EmailField(max_length=150, unique=True, verbose_name='Email')),
                ('first_name', models.CharField(max_length=150, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=150, verbose_name='Фамилия')),
                ('password', models.CharField(max_length=150, verbose_name='Пароль')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
